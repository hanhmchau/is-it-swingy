{"version":3,"sources":["RollButton.js","Hero.js","Nav.js","Graph.js","GraphBox.js","App.js","services/index.js","serviceWorker.js","index.js"],"names":["RollButton","_ref","roll","loading","_ref$firstTime","firstTime","react_default","a","createElement","onClick","className","classnames","button","is-large","is-loading","Hero","href","RollButton_RollButton","Nav","Graph","data","ResponsiveContainer","ComposedChart_default","sum","reduce","curr","val","map","value","i","name","avg","length","_transform","margin","top","right","left","bottom","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Bar","type","stackId","fill","Line","stroke","GraphBox","Nav_Nav","Graph_Graph","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","newData","Array","times","dice","_this2","_starLoading","Promise","resolve","reject","request","qs","err","response","JSON","parse","body","then","results","_accumulateChartData","catch","console","log","undefined","GraphBox_GraphBox","bind","Hero_Hero","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d96e64b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as classnames from 'classnames';\r\n\r\nexport const RollButton = ({ roll, loading, firstTime = true }) => (\r\n\t<button\r\n\t\tonClick={() => roll()}\r\n\t\tclassName={classnames({\r\n\t\t\tbutton: true,\r\n\t\t\t'is-large': true,\r\n\t\t\t'is-loading': loading\r\n\t\t})}\r\n\t>\r\n\t\t<span className=\"is-hidden-when-loading\">\r\n\t\t\tRoll me{!firstTime && ' another'}&nbsp;\r\n\t\t\t<span className=\"has-text-primary\">100,000</span>\r\n\t\t\t<span className=\"has-text-grey\">d20</span>&nbsp;burritos\r\n\t\t</span>\r\n\t</button>\r\n);\r\n","import React from 'react';\r\nimport { RollButton } from './RollButton';\r\n\r\nexport const Hero = ({ roll, loading }) => (\r\n\t<div className=\"hero-body\">\r\n\t\t<div className=\"container has-text-centered is-size-4\">\r\n\t\t\t<header className=\"bd-index-header\">\r\n\t\t\t\t<h3 className=\"title is-3\">\r\n\t\t\t\t\tIs&nbsp;\r\n\t\t\t\t\t<a href=\"https://roll20.net\" className=\"has-text-primary\">\r\n\t\t\t\t\t\tRoll20\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t&nbsp;swingy?\r\n\t\t\t\t</h3>\r\n\t\t\t\t<h6 className=\"subtitle is-6\">\r\n\t\t\t\t\tWe know it's not the VTT system we deserve. But is it swingy on top of\r\n\t\t\t\t\tthat?\r\n\t\t\t\t</h6>\r\n\t\t\t</header>\r\n\t\t\t<RollButton roll={roll} loading={loading} />\r\n\t\t</div>\r\n\t</div>\r\n);\r\n","import React from 'react';\r\n\r\nexport const Nav = () => (\r\n\t<div className=\"hero-header has-padding-2\">\r\n\t<div className=\"container has-text-centered is-size-4\">\r\n\t\t<header className=\"bd-index-header\">\r\n\t\t\t<h4 className=\"title is-4\">\r\n\t\t\t\tIs&nbsp;\r\n\t\t\t\t<a href=\"https://roll20.net\" className=\"has-text-primary\">\r\n\t\t\t\t\tRoll20\r\n\t\t\t\t</a>\r\n\t\t\t\t&nbsp;swingy?\r\n\t\t\t</h4>\r\n\t\t</header>\r\n\t</div>\r\n</div>\r\n);\r\n","import React from 'react';\r\nimport {\r\n\tLine,\r\n\tBar,\r\n\tXAxis,\r\n\tYAxis,\r\n\tCartesianGrid,\r\n\tTooltip,\r\n\tResponsiveContainer\r\n} from 'recharts';\r\nimport ComposedChart from 'recharts/lib/chart/ComposedChart';\r\n\r\nconst _transform = data => {\r\n\tconst sum = data.reduce((curr, val) => curr + val, 0);\r\n\treturn data.map((value, i) => ({\r\n\t\tname: i + 1,\r\n\t\tvalue: value,\r\n\t\tavg: sum / data.length\r\n\t}));\r\n};\r\nexport const Graph = ({ data }) => (\r\n\t<ResponsiveContainer className=\"justify-center\">\r\n\t\t<ComposedChart\r\n\t\t\tdata={_transform(data)}\r\n\t\t\tmargin={{ top: 10, right: 30, left: 0, bottom: 0 }}\r\n\t\t>\r\n\t\t\t<XAxis dataKey=\"name\" />\r\n\t\t\t<YAxis />\r\n\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t<Tooltip />\r\n\t\t\t<Bar\r\n\t\t\t\ttype=\"monotone\"\r\n\t\t\t\tdataKey=\"value\"\r\n\t\t\t\tstackId=\"value\"\r\n\t\t\t\tfill=\" hsl(0, 0%, 71%) \"\r\n\t\t\t/>\r\n\t\t\t<Line type=\"monotone\" dataKey=\"avg\" stroke=\" hsl(171, 100%, 41%) \" />\r\n\t\t</ComposedChart>\r\n\t</ResponsiveContainer>\r\n);\r\n","import React from 'react';\r\nimport { Nav } from './Nav';\r\nimport { RollButton } from './RollButton';\r\nimport { Graph } from './Graph';\r\n\r\nexport const GraphBox = ({ roll, loading, data }) => (\r\n\t<div>\r\n\t\t<Nav />\r\n\t\t<div className=\"hero-body graph-container\">\r\n\t\t\t<div className=\"graph-component\">\r\n\t\t\t\t<Graph data={data} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div className=\"hero-footer has-text-centered\">\r\n\t\t\t<RollButton roll={roll} loading={loading} firstTime={false} />\r\n\t\t</div>\r\n\t</div>\r\n);\r\n","import 'bulma/css/bulma.css';\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Hero } from './Hero';\nimport { roll } from './services';\nimport { GraphBox } from './GraphBox';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloading: false\n\t\t};\n\t}\n\t_starLoading() {\n\t\tthis.setState({\n\t\t\tloading: true\n\t\t});\n\t}\n\t_accumulateChartData(newData) {\n\t\tconst existingData = this.state.data || new Array(20).fill(0);\n\t\treturn existingData.map((val, i) => val + newData[i]);\n\t}\n\troll() {\n\t\tthis._starLoading();\n\t\troll(100000, 20)\n\t\t\t.then(results => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tdata: this._accumulateChartData(results)\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(console.log);\n\t}\n\treset() {\n\t\tthis.setState({\n\t\t\tloading: false,\n\t\t\tdata: undefined\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<section className=\"bd-index-fullscreen hero is-fullheight is-light\">\n\t\t\t\t{this.state.data ? (\n\t\t\t\t\t<GraphBox\n\t\t\t\t\t\troll={this.roll.bind(this)}\n\t\t\t\t\t\tloading={this.state.loading}\n\t\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<Hero roll={this.roll.bind(this)} loading={this.state.loading} />\n\t\t\t\t)}\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default App;\n","import * as request from 'request';\r\n\r\nexport const roll = (times, dice) =>\r\n\tnew Promise((resolve, reject) => {\r\n\t\trequest.get(\r\n\t\t\t'api/doroll',\r\n\t\t\t{\r\n\t\t\t\tqs: {\r\n\t\t\t\t\ttimes,\r\n\t\t\t\t\tdice\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t(err, response) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve(JSON.parse(response.body));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}